///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBCLOUDDOCSUserAuthRoutes.h"
#import "DBCLOUDDOCSCloudDocsAccessError.h"
#import "DBCLOUDDOCSContent.h"
#import "DBCLOUDDOCSGetContentArg.h"
#import "DBCLOUDDOCSGetMetadataArg.h"
#import "DBCLOUDDOCSGetMetadataError.h"
#import "DBCLOUDDOCSGetMetadataErrorTagUnion.h"
#import "DBCLOUDDOCSGetMetadataResult.h"
#import "DBCLOUDDOCSLockArg.h"
#import "DBCLOUDDOCSLockResult.h"
#import "DBCLOUDDOCSLockingError.h"
#import "DBCLOUDDOCSLockingErrorTagUnion.h"
#import "DBCLOUDDOCSRenameArg.h"
#import "DBCLOUDDOCSRenameError.h"
#import "DBCLOUDDOCSRenameErrorTagUnion.h"
#import "DBCLOUDDOCSRenameResult.h"
#import "DBCLOUDDOCSRouteObjects.h"
#import "DBCLOUDDOCSUnlockArg.h"
#import "DBCLOUDDOCSUnlockResult.h"
#import "DBCLOUDDOCSUpdateContentArg.h"
#import "DBCLOUDDOCSUpdateContentError.h"
#import "DBCLOUDDOCSUpdateContentResult.h"
#import "DBCLOUDDOCSUserInfo.h"
#import "DBCLOUDDOCSUserPermissions.h"
#import "DBRequestErrors.h"
#import "DBStoneBase.h"
#import "DBTransportClientProtocol.h"

@implementation DBCLOUDDOCSUserAuthRoutes

- (instancetype)init:(id<DBTransportClient>)client {
  self = [super init];
  if (self) {
    _client = client;
  }
  return self;
}

- (DBDownloadUrlTask *)getContentUrl:(NSString *)fileId overwrite:(BOOL)overwrite destination:(NSURL *)destination {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSGetContent;
  DBCLOUDDOCSGetContentArg *arg = [[DBCLOUDDOCSGetContentArg alloc] initWithFileId:fileId];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)getContentUrl:(NSString *)fileId
                           overwrite:(BOOL)overwrite
                         destination:(NSURL *)destination
                     byteOffsetStart:(NSNumber *)byteOffsetStart
                       byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSGetContent;
  DBCLOUDDOCSGetContentArg *arg = [[DBCLOUDDOCSGetContentArg alloc] initWithFileId:fileId];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)getContentData:(NSString *)fileId {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSGetContent;
  DBCLOUDDOCSGetContentArg *arg = [[DBCLOUDDOCSGetContentArg alloc] initWithFileId:fileId];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getContentData:(NSString *)fileId
                       byteOffsetStart:(NSNumber *)byteOffsetStart
                         byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSGetContent;
  DBCLOUDDOCSGetContentArg *arg = [[DBCLOUDDOCSGetContentArg alloc] initWithFileId:fileId];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBRpcTask *)getMetadata {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSGetMetadata;
  DBCLOUDDOCSGetMetadataArg *arg = [[DBCLOUDDOCSGetMetadataArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getMetadata:(NSString *)fileId {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSGetMetadata;
  DBCLOUDDOCSGetMetadataArg *arg = [[DBCLOUDDOCSGetMetadataArg alloc] initWithFileId:fileId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)lock {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSLock;
  DBCLOUDDOCSLockArg *arg = [[DBCLOUDDOCSLockArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)lock:(NSString *)fileId {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSLock;
  DBCLOUDDOCSLockArg *arg = [[DBCLOUDDOCSLockArg alloc] initWithFileId:fileId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)rename {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSRename;
  DBCLOUDDOCSRenameArg *arg = [[DBCLOUDDOCSRenameArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)rename:(NSString *)fileId title:(NSString *)title {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSRename;
  DBCLOUDDOCSRenameArg *arg = [[DBCLOUDDOCSRenameArg alloc] initWithFileId:fileId title:title];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)unlock {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUnlock;
  DBCLOUDDOCSUnlockArg *arg = [[DBCLOUDDOCSUnlockArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)unlock:(NSString *)fileId {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUnlock;
  DBCLOUDDOCSUnlockArg *arg = [[DBCLOUDDOCSUnlockArg alloc] initWithFileId:fileId];
  return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)updateContentUrl:(NSString *)fileId
                       actorTokens:(NSArray<NSString *> *)actorTokens
                          inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUpdateContent;
  DBCLOUDDOCSUpdateContentArg *arg =
      [[DBCLOUDDOCSUpdateContentArg alloc] initWithFileId:fileId actorTokens:actorTokens];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)updateContentUrl:(NSString *)fileId
                       actorTokens:(NSArray<NSString *> *)actorTokens
                additionalContents:(NSArray<DBCLOUDDOCSContent *> *)additionalContents
                          inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUpdateContent;
  DBCLOUDDOCSUpdateContentArg *arg = [[DBCLOUDDOCSUpdateContentArg alloc] initWithFileId:fileId
                                                                             actorTokens:actorTokens
                                                                      additionalContents:additionalContents];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)updateContentData:(NSString *)fileId
                        actorTokens:(NSArray<NSString *> *)actorTokens
                          inputData:(NSData *)inputData {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUpdateContent;
  DBCLOUDDOCSUpdateContentArg *arg =
      [[DBCLOUDDOCSUpdateContentArg alloc] initWithFileId:fileId actorTokens:actorTokens];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)updateContentData:(NSString *)fileId
                        actorTokens:(NSArray<NSString *> *)actorTokens
                 additionalContents:(NSArray<DBCLOUDDOCSContent *> *)additionalContents
                          inputData:(NSData *)inputData {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUpdateContent;
  DBCLOUDDOCSUpdateContentArg *arg = [[DBCLOUDDOCSUpdateContentArg alloc] initWithFileId:fileId
                                                                             actorTokens:actorTokens
                                                                      additionalContents:additionalContents];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)updateContentStream:(NSString *)fileId
                          actorTokens:(NSArray<NSString *> *)actorTokens
                          inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUpdateContent;
  DBCLOUDDOCSUpdateContentArg *arg =
      [[DBCLOUDDOCSUpdateContentArg alloc] initWithFileId:fileId actorTokens:actorTokens];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)updateContentStream:(NSString *)fileId
                          actorTokens:(NSArray<NSString *> *)actorTokens
                   additionalContents:(NSArray<DBCLOUDDOCSContent *> *)additionalContents
                          inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBCLOUDDOCSRouteObjects.DBCLOUDDOCSUpdateContent;
  DBCLOUDDOCSUpdateContentArg *arg = [[DBCLOUDDOCSUpdateContentArg alloc] initWithFileId:fileId
                                                                             actorTokens:actorTokens
                                                                      additionalContents:additionalContents];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

@end
