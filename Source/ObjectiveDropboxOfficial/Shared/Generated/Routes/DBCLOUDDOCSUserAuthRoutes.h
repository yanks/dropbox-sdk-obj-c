///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBTasks.h"

@class DBCLOUDDOCSCloudDocsAccessError;
@class DBCLOUDDOCSContent;
@class DBCLOUDDOCSContentPurpose;
@class DBCLOUDDOCSGetMetadataError;
@class DBCLOUDDOCSGetMetadataErrorTagUnion;
@class DBCLOUDDOCSGetMetadataResult;
@class DBCLOUDDOCSLockResult;
@class DBCLOUDDOCSLockingError;
@class DBCLOUDDOCSLockingErrorTagUnion;
@class DBCLOUDDOCSRenameError;
@class DBCLOUDDOCSRenameErrorTagUnion;
@class DBCLOUDDOCSRenameResult;
@class DBCLOUDDOCSUnlockResult;
@class DBCLOUDDOCSUpdateContentError;
@class DBCLOUDDOCSUpdateContentResult;
@class DBCLOUDDOCSUserInfo;
@class DBCLOUDDOCSUserPermissions;
@class DBNilObject;

@protocol DBTransportClient;

///
/// Routes for the `CloudDocs` namespace
///

NS_ASSUME_NONNULL_BEGIN

@interface DBCLOUDDOCSUserAuthRoutes : NSObject

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic, readonly) id<DBTransportClient> client;

/// Initializes the `DBCLOUDDOCSUserAuthRoutes` namespace container object with
/// a networking client.
- (instancetype)init:(id<DBTransportClient>)client;

///
/// Fetch the binary content of the requested document. This route requires Cloud Docs auth. Please make a request to
/// cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBCLOUDDOCSCloudDocsAccessError` object on failure.
///
- (DBDownloadUrlTask<DBNilObject *, DBCLOUDDOCSCloudDocsAccessError *> *)getContentUrl:(NSString *)fileId
                                                                             overwrite:(BOOL)overwrite
                                                                           destination:(NSURL *)destination;

///
/// Fetch the binary content of the requested document. This route requires Cloud Docs auth. Please make a request to
/// cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBCLOUDDOCSCloudDocsAccessError` object on failure.
///
- (DBDownloadUrlTask<DBNilObject *, DBCLOUDDOCSCloudDocsAccessError *> *)getContentUrl:(NSString *)fileId
                                                                             overwrite:(BOOL)overwrite
                                                                           destination:(NSURL *)destination
                                                                       byteOffsetStart:(NSNumber *)byteOffsetStart
                                                                         byteOffsetEnd:(NSNumber *)byteOffsetEnd;

///
/// Fetch the binary content of the requested document. This route requires Cloud Docs auth. Please make a request to
/// cloud_docs/authorize and supply that token in the Authorization header.
///
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBCLOUDDOCSCloudDocsAccessError` object on failure.
///
- (DBDownloadDataTask<DBNilObject *, DBCLOUDDOCSCloudDocsAccessError *> *)getContentData:(NSString *)fileId;

///
/// Fetch the binary content of the requested document. This route requires Cloud Docs auth. Please make a request to
/// cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBCLOUDDOCSCloudDocsAccessError` object on failure.
///
- (DBDownloadDataTask<DBNilObject *, DBCLOUDDOCSCloudDocsAccessError *> *)getContentData:(NSString *)fileId
                                                                         byteOffsetStart:(NSNumber *)byteOffsetStart
                                                                           byteOffsetEnd:(NSNumber *)byteOffsetEnd;

///
/// Fetches metadata associated with a Cloud Doc and user. This route requires Cloud Docs auth. Please make a request to
/// cloud_docs/authorize and supply that token in the Authorization header.
///
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSGetMetadataResult` object on success or
/// a `DBCLOUDDOCSGetMetadataError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSGetMetadataResult *, DBCLOUDDOCSGetMetadataError *> *)getMetadata;

///
/// Fetches metadata associated with a Cloud Doc and user. This route requires Cloud Docs auth. Please make a request to
/// cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param fileId API ID ("id:...") associated with the Cloud Doc.
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSGetMetadataResult` object on success or
/// a `DBCLOUDDOCSGetMetadataError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSGetMetadataResult *, DBCLOUDDOCSGetMetadataError *> *)getMetadata:(nullable NSString *)fileId;

///
/// Lock a Cloud Doc. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that
/// token in the Authorization header.
///
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSLockResult` object on success or a
/// `DBCLOUDDOCSLockingError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSLockResult *, DBCLOUDDOCSLockingError *> *)lock;

///
/// Lock a Cloud Doc. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that
/// token in the Authorization header.
///
/// @param fileId The API ID ("id:...") associated with the Cloud Doc
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSLockResult` object on success or a
/// `DBCLOUDDOCSLockingError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSLockResult *, DBCLOUDDOCSLockingError *> *)lock:(nullable NSString *)fileId;

///
/// Update the title of a Cloud Doc. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize
/// and supply that token in the Authorization header.
///
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSRenameResult` object on success or a
/// `DBCLOUDDOCSRenameError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSRenameResult *, DBCLOUDDOCSRenameError *> *)rename;

///
/// Update the title of a Cloud Doc. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize
/// and supply that token in the Authorization header.
///
/// @param fileId The API ID ("id:...") associated with the Cloud Doc
/// @param title The new title of the doc, excluding extension
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSRenameResult` object on success or a
/// `DBCLOUDDOCSRenameError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSRenameResult *, DBCLOUDDOCSRenameError *> *)rename:(nullable NSString *)fileId
                                                                     title:(nullable NSString *)title;

///
/// Unlock a Cloud Doc. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize and supply
/// that token in the Authorization header.
///
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUnlockResult` object on success or a
/// `DBCLOUDDOCSLockingError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSUnlockResult *, DBCLOUDDOCSLockingError *> *)unlock;

///
/// Unlock a Cloud Doc. This route requires Cloud Docs auth. Please make a request to cloud_docs/authorize and supply
/// that token in the Authorization header.
///
/// @param fileId The API ID ("id:...") associated with the Cloud Doc
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUnlockResult` object on success or a
/// `DBCLOUDDOCSLockingError` object on failure.
///
- (DBRpcTask<DBCLOUDDOCSUnlockResult *, DBCLOUDDOCSLockingError *> *)unlock:(nullable NSString *)fileId;

///
/// Update the contents of a Cloud Doc. This should be called for files with a max size of 150MB. This route requires
/// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param actorTokens A list of auth_tokens, one for each editor who made changes to the document since the last call
/// to update_content.
/// @param inputUrl The file to upload, as an NSString * object.
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUpdateContentResult` object on success
/// or a `DBCLOUDDOCSUpdateContentError` object on failure.
///
- (DBUploadTask<DBCLOUDDOCSUpdateContentResult *, DBCLOUDDOCSUpdateContentError *> *)
updateContentUrl:(NSString *)fileId
     actorTokens:(NSArray<NSString *> *)actorTokens
        inputUrl:(NSString *)inputUrl;

///
/// Update the contents of a Cloud Doc. This should be called for files with a max size of 150MB. This route requires
/// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param actorTokens A list of auth_tokens, one for each editor who made changes to the document since the last call
/// to update_content.
/// @param additionalContents Currently, this will always be empty until we implement upload_additional_content.
/// @param inputUrl The file to upload, as an NSString * object.
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUpdateContentResult` object on success
/// or a `DBCLOUDDOCSUpdateContentError` object on failure.
///
- (DBUploadTask<DBCLOUDDOCSUpdateContentResult *, DBCLOUDDOCSUpdateContentError *> *)
  updateContentUrl:(NSString *)fileId
       actorTokens:(NSArray<NSString *> *)actorTokens
additionalContents:(nullable NSArray<DBCLOUDDOCSContent *> *)additionalContents
          inputUrl:(NSString *)inputUrl;

///
/// Update the contents of a Cloud Doc. This should be called for files with a max size of 150MB. This route requires
/// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param actorTokens A list of auth_tokens, one for each editor who made changes to the document since the last call
/// to update_content.
/// @param inputData The file to upload, as an NSData * object.
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUpdateContentResult` object on success
/// or a `DBCLOUDDOCSUpdateContentError` object on failure.
///
- (DBUploadTask<DBCLOUDDOCSUpdateContentResult *, DBCLOUDDOCSUpdateContentError *> *)
updateContentData:(NSString *)fileId
      actorTokens:(NSArray<NSString *> *)actorTokens
        inputData:(NSData *)inputData;

///
/// Update the contents of a Cloud Doc. This should be called for files with a max size of 150MB. This route requires
/// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param actorTokens A list of auth_tokens, one for each editor who made changes to the document since the last call
/// to update_content.
/// @param additionalContents Currently, this will always be empty until we implement upload_additional_content.
/// @param inputData The file to upload, as an NSData * object.
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUpdateContentResult` object on success
/// or a `DBCLOUDDOCSUpdateContentError` object on failure.
///
- (DBUploadTask<DBCLOUDDOCSUpdateContentResult *, DBCLOUDDOCSUpdateContentError *> *)
 updateContentData:(NSString *)fileId
       actorTokens:(NSArray<NSString *> *)actorTokens
additionalContents:(nullable NSArray<DBCLOUDDOCSContent *> *)additionalContents
         inputData:(NSData *)inputData;

///
/// Update the contents of a Cloud Doc. This should be called for files with a max size of 150MB. This route requires
/// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param actorTokens A list of auth_tokens, one for each editor who made changes to the document since the last call
/// to update_content.
/// @param inputStream The file to upload, as an NSInputStream * object.
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUpdateContentResult` object on success
/// or a `DBCLOUDDOCSUpdateContentError` object on failure.
///
- (DBUploadTask<DBCLOUDDOCSUpdateContentResult *, DBCLOUDDOCSUpdateContentError *> *)
updateContentStream:(NSString *)fileId
        actorTokens:(NSArray<NSString *> *)actorTokens
        inputStream:(NSInputStream *)inputStream;

///
/// Update the contents of a Cloud Doc. This should be called for files with a max size of 150MB. This route requires
/// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that token in the Authorization header.
///
/// @param actorTokens A list of auth_tokens, one for each editor who made changes to the document since the last call
/// to update_content.
/// @param additionalContents Currently, this will always be empty until we implement upload_additional_content.
/// @param inputStream The file to upload, as an NSInputStream * object.
///
/// @return Through the response callback, the caller will receive a `DBCLOUDDOCSUpdateContentResult` object on success
/// or a `DBCLOUDDOCSUpdateContentError` object on failure.
///
- (DBUploadTask<DBCLOUDDOCSUpdateContentResult *, DBCLOUDDOCSUpdateContentError *> *)
updateContentStream:(NSString *)fileId
        actorTokens:(NSArray<NSString *> *)actorTokens
 additionalContents:(nullable NSArray<DBCLOUDDOCSContent *> *)additionalContents
        inputStream:(NSInputStream *)inputStream;

@end

NS_ASSUME_NONNULL_END
