///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `StoneFixtures` namespace.

#import "DBSTONEFIXTURESEmptyContainer.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSTONEFIXTURESEmptyContainer

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBSTONEFIXTURESEmptyContainerSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBSTONEFIXTURESEmptyContainerSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBSTONEFIXTURESEmptyContainerSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmptyContainer:other];
}

- (BOOL)isEqualToEmptyContainer:(DBSTONEFIXTURESEmptyContainer *)anEmptyContainer {
  if (self == anEmptyContainer) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBSTONEFIXTURESEmptyContainerSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBSTONEFIXTURESEmptyContainer *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBSTONEFIXTURESEmptyContainer *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBSTONEFIXTURESEmptyContainer alloc] initDefault];
}

@end

#import "DBSTONEFIXTURESMixedInternalOnlyContainer.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSTONEFIXTURESMixedInternalOnlyContainer

#pragma mark - Constructors

- (instancetype)initWithPublicValue:(NSNumber *)publicValue {

  self = [super init];
  if (self) {
    _publicValue = publicValue ?: @(0);
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithPublicValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBSTONEFIXTURESMixedInternalOnlyContainerSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBSTONEFIXTURESMixedInternalOnlyContainerSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBSTONEFIXTURESMixedInternalOnlyContainerSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.publicValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMixedInternalOnlyContainer:other];
}

- (BOOL)isEqualToMixedInternalOnlyContainer:(DBSTONEFIXTURESMixedInternalOnlyContainer *)aMixedInternalOnlyContainer {
  if (self == aMixedInternalOnlyContainer) {
    return YES;
  }
  if (![self.publicValue isEqual:aMixedInternalOnlyContainer.publicValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBSTONEFIXTURESMixedInternalOnlyContainerSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBSTONEFIXTURESMixedInternalOnlyContainer *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"public_value"] = valueObj.publicValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBSTONEFIXTURESMixedInternalOnlyContainer *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *publicValue = valueDict[@"public_value"] ?: @(0);

  return [[DBSTONEFIXTURESMixedInternalOnlyContainer alloc] initWithPublicValue:publicValue];
}

@end

#import "DBSTONEFIXTURESMixedInternalOnlyEnum.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSTONEFIXTURESMixedInternalOnlyEnum

#pragma mark - Constructors

- (instancetype)initWithPublic {
  self = [super init];
  if (self) {
    _tag = DBSTONEFIXTURESMixedInternalOnlyEnumPublic;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSTONEFIXTURESMixedInternalOnlyEnumOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPublic {
  return _tag == DBSTONEFIXTURESMixedInternalOnlyEnumPublic;
}

- (BOOL)isOther {
  return _tag == DBSTONEFIXTURESMixedInternalOnlyEnumOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSTONEFIXTURESMixedInternalOnlyEnumPublic:
    return @"DBSTONEFIXTURESMixedInternalOnlyEnumPublic";
  case DBSTONEFIXTURESMixedInternalOnlyEnumOther:
    return @"DBSTONEFIXTURESMixedInternalOnlyEnumOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBSTONEFIXTURESMixedInternalOnlyEnumSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBSTONEFIXTURESMixedInternalOnlyEnumSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBSTONEFIXTURESMixedInternalOnlyEnumSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBSTONEFIXTURESMixedInternalOnlyEnumPublic:
    result = prime * result + [[self tagName] hash];
  case DBSTONEFIXTURESMixedInternalOnlyEnumOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMixedInternalOnlyEnum:other];
}

- (BOOL)isEqualToMixedInternalOnlyEnum:(DBSTONEFIXTURESMixedInternalOnlyEnum *)aMixedInternalOnlyEnum {
  if (self == aMixedInternalOnlyEnum) {
    return YES;
  }
  if (self.tag != aMixedInternalOnlyEnum.tag) {
    return NO;
  }
  switch (_tag) {
  case DBSTONEFIXTURESMixedInternalOnlyEnumPublic:
    return [[self tagName] isEqual:[aMixedInternalOnlyEnum tagName]];
  case DBSTONEFIXTURESMixedInternalOnlyEnumOther:
    return [[self tagName] isEqual:[aMixedInternalOnlyEnum tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBSTONEFIXTURESMixedInternalOnlyEnumSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBSTONEFIXTURESMixedInternalOnlyEnum *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPublic]) {
    jsonDict[@".tag"] = @"public";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBSTONEFIXTURESMixedInternalOnlyEnum *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"public"]) {
    return [[DBSTONEFIXTURESMixedInternalOnlyEnum alloc] initWithPublic];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSTONEFIXTURESMixedInternalOnlyEnum alloc] initWithOther];
  } else {
    return [[DBSTONEFIXTURESMixedInternalOnlyEnum alloc] initWithOther];
  }
}

@end
