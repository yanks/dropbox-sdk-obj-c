///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `CloudDocs` namespace.

#import "DBCLOUDDOCSCloudDocsAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSCloudDocsAccessError

#pragma mark - Constructors

- (instancetype)initWithInvalidDocId {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSCloudDocsAccessErrorInvalidDocId;
  }
  return self;
}

- (instancetype)initWithNotFound {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSCloudDocsAccessErrorNotFound;
  }
  return self;
}

- (instancetype)initWithPermissionDenied {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSCloudDocsAccessErrorPermissionDenied;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSCloudDocsAccessErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidDocId {
  return _tag == DBCLOUDDOCSCloudDocsAccessErrorInvalidDocId;
}

- (BOOL)isNotFound {
  return _tag == DBCLOUDDOCSCloudDocsAccessErrorNotFound;
}

- (BOOL)isPermissionDenied {
  return _tag == DBCLOUDDOCSCloudDocsAccessErrorPermissionDenied;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSCloudDocsAccessErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSCloudDocsAccessErrorInvalidDocId:
    return @"DBCLOUDDOCSCloudDocsAccessErrorInvalidDocId";
  case DBCLOUDDOCSCloudDocsAccessErrorNotFound:
    return @"DBCLOUDDOCSCloudDocsAccessErrorNotFound";
  case DBCLOUDDOCSCloudDocsAccessErrorPermissionDenied:
    return @"DBCLOUDDOCSCloudDocsAccessErrorPermissionDenied";
  case DBCLOUDDOCSCloudDocsAccessErrorOther:
    return @"DBCLOUDDOCSCloudDocsAccessErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSCloudDocsAccessErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSCloudDocsAccessErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSCloudDocsAccessErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSCloudDocsAccessErrorInvalidDocId:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSCloudDocsAccessErrorNotFound:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSCloudDocsAccessErrorPermissionDenied:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSCloudDocsAccessErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCloudDocsAccessError:other];
}

- (BOOL)isEqualToCloudDocsAccessError:(DBCLOUDDOCSCloudDocsAccessError *)aCloudDocsAccessError {
  if (self == aCloudDocsAccessError) {
    return YES;
  }
  if (self.tag != aCloudDocsAccessError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSCloudDocsAccessErrorInvalidDocId:
    return [[self tagName] isEqual:[aCloudDocsAccessError tagName]];
  case DBCLOUDDOCSCloudDocsAccessErrorNotFound:
    return [[self tagName] isEqual:[aCloudDocsAccessError tagName]];
  case DBCLOUDDOCSCloudDocsAccessErrorPermissionDenied:
    return [[self tagName] isEqual:[aCloudDocsAccessError tagName]];
  case DBCLOUDDOCSCloudDocsAccessErrorOther:
    return [[self tagName] isEqual:[aCloudDocsAccessError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSCloudDocsAccessErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSCloudDocsAccessError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidDocId]) {
    jsonDict[@".tag"] = @"invalid_doc_id";
  } else if ([valueObj isNotFound]) {
    jsonDict[@".tag"] = @"not_found";
  } else if ([valueObj isPermissionDenied]) {
    jsonDict[@".tag"] = @"permission_denied";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSCloudDocsAccessError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_doc_id"]) {
    return [[DBCLOUDDOCSCloudDocsAccessError alloc] initWithInvalidDocId];
  } else if ([tag isEqualToString:@"not_found"]) {
    return [[DBCLOUDDOCSCloudDocsAccessError alloc] initWithNotFound];
  } else if ([tag isEqualToString:@"permission_denied"]) {
    return [[DBCLOUDDOCSCloudDocsAccessError alloc] initWithPermissionDenied];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSCloudDocsAccessError alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSCloudDocsAccessError alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSContent.h"
#import "DBCLOUDDOCSContentPurpose.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSContent

#pragma mark - Constructors

- (instancetype)initWithPurpose:(DBCLOUDDOCSContentPurpose *)purpose contentKey:(NSString *)contentKey {
  [DBStoneValidators nonnullValidator:nil](purpose);
  [DBStoneValidators nonnullValidator:nil](contentKey);

  self = [super init];
  if (self) {
    _purpose = purpose;
    _contentKey = contentKey;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSContentSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSContentSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSContentSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.purpose hash];
  result = prime * result + [self.contentKey hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContent:other];
}

- (BOOL)isEqualToContent:(DBCLOUDDOCSContent *)aContent {
  if (self == aContent) {
    return YES;
  }
  if (![self.purpose isEqual:aContent.purpose]) {
    return NO;
  }
  if (![self.contentKey isEqual:aContent.contentKey]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSContentSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSContent *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"purpose"] = [DBCLOUDDOCSContentPurposeSerializer serialize:valueObj.purpose];
  jsonDict[@"content_key"] = valueObj.contentKey;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSContent *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBCLOUDDOCSContentPurpose *purpose = [DBCLOUDDOCSContentPurposeSerializer deserialize:valueDict[@"purpose"]];
  NSString *contentKey = valueDict[@"content_key"];

  return [[DBCLOUDDOCSContent alloc] initWithPurpose:purpose contentKey:contentKey];
}

@end

#import "DBCLOUDDOCSContentPurpose.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSContentPurpose

#pragma mark - Constructors

- (instancetype)initWithSearch {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSContentPurposeSearch;
  }
  return self;
}

- (instancetype)initWithPreview {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSContentPurposePreview;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSContentPurposeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isSearch {
  return _tag == DBCLOUDDOCSContentPurposeSearch;
}

- (BOOL)isPreview {
  return _tag == DBCLOUDDOCSContentPurposePreview;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSContentPurposeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSContentPurposeSearch:
    return @"DBCLOUDDOCSContentPurposeSearch";
  case DBCLOUDDOCSContentPurposePreview:
    return @"DBCLOUDDOCSContentPurposePreview";
  case DBCLOUDDOCSContentPurposeOther:
    return @"DBCLOUDDOCSContentPurposeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSContentPurposeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSContentPurposeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSContentPurposeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSContentPurposeSearch:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSContentPurposePreview:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSContentPurposeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContentPurpose:other];
}

- (BOOL)isEqualToContentPurpose:(DBCLOUDDOCSContentPurpose *)aContentPurpose {
  if (self == aContentPurpose) {
    return YES;
  }
  if (self.tag != aContentPurpose.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSContentPurposeSearch:
    return [[self tagName] isEqual:[aContentPurpose tagName]];
  case DBCLOUDDOCSContentPurposePreview:
    return [[self tagName] isEqual:[aContentPurpose tagName]];
  case DBCLOUDDOCSContentPurposeOther:
    return [[self tagName] isEqual:[aContentPurpose tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSContentPurposeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSContentPurpose *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSearch]) {
    jsonDict[@".tag"] = @"search";
  } else if ([valueObj isPreview]) {
    jsonDict[@".tag"] = @"preview";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSContentPurpose *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"search"]) {
    return [[DBCLOUDDOCSContentPurpose alloc] initWithSearch];
  } else if ([tag isEqualToString:@"preview"]) {
    return [[DBCLOUDDOCSContentPurpose alloc] initWithPreview];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSContentPurpose alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSContentPurpose alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSGenericErrorTag.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSGenericErrorTag

#pragma mark - Constructors

- (instancetype)initWithInvalidArgument {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSGenericErrorTagInvalidArgument;
  }
  return self;
}

- (instancetype)initWithUnauthenticated {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSGenericErrorTagUnauthenticated;
  }
  return self;
}

- (instancetype)initWithPermissionDenied {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSGenericErrorTagPermissionDenied;
  }
  return self;
}

- (instancetype)initWithDocNotFound {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSGenericErrorTagDocNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSGenericErrorTagOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidArgument {
  return _tag == DBCLOUDDOCSGenericErrorTagInvalidArgument;
}

- (BOOL)isUnauthenticated {
  return _tag == DBCLOUDDOCSGenericErrorTagUnauthenticated;
}

- (BOOL)isPermissionDenied {
  return _tag == DBCLOUDDOCSGenericErrorTagPermissionDenied;
}

- (BOOL)isDocNotFound {
  return _tag == DBCLOUDDOCSGenericErrorTagDocNotFound;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSGenericErrorTagOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSGenericErrorTagInvalidArgument:
    return @"DBCLOUDDOCSGenericErrorTagInvalidArgument";
  case DBCLOUDDOCSGenericErrorTagUnauthenticated:
    return @"DBCLOUDDOCSGenericErrorTagUnauthenticated";
  case DBCLOUDDOCSGenericErrorTagPermissionDenied:
    return @"DBCLOUDDOCSGenericErrorTagPermissionDenied";
  case DBCLOUDDOCSGenericErrorTagDocNotFound:
    return @"DBCLOUDDOCSGenericErrorTagDocNotFound";
  case DBCLOUDDOCSGenericErrorTagOther:
    return @"DBCLOUDDOCSGenericErrorTagOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSGenericErrorTagSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSGenericErrorTagSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSGenericErrorTagSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSGenericErrorTagInvalidArgument:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSGenericErrorTagUnauthenticated:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSGenericErrorTagPermissionDenied:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSGenericErrorTagDocNotFound:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSGenericErrorTagOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGenericErrorTag:other];
}

- (BOOL)isEqualToGenericErrorTag:(DBCLOUDDOCSGenericErrorTag *)aGenericErrorTag {
  if (self == aGenericErrorTag) {
    return YES;
  }
  if (self.tag != aGenericErrorTag.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSGenericErrorTagInvalidArgument:
    return [[self tagName] isEqual:[aGenericErrorTag tagName]];
  case DBCLOUDDOCSGenericErrorTagUnauthenticated:
    return [[self tagName] isEqual:[aGenericErrorTag tagName]];
  case DBCLOUDDOCSGenericErrorTagPermissionDenied:
    return [[self tagName] isEqual:[aGenericErrorTag tagName]];
  case DBCLOUDDOCSGenericErrorTagDocNotFound:
    return [[self tagName] isEqual:[aGenericErrorTag tagName]];
  case DBCLOUDDOCSGenericErrorTagOther:
    return [[self tagName] isEqual:[aGenericErrorTag tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSGenericErrorTagSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSGenericErrorTag *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidArgument]) {
    jsonDict[@".tag"] = @"invalid_argument";
  } else if ([valueObj isUnauthenticated]) {
    jsonDict[@".tag"] = @"unauthenticated";
  } else if ([valueObj isPermissionDenied]) {
    jsonDict[@".tag"] = @"permission_denied";
  } else if ([valueObj isDocNotFound]) {
    jsonDict[@".tag"] = @"doc_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSGenericErrorTag *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_argument"]) {
    return [[DBCLOUDDOCSGenericErrorTag alloc] initWithInvalidArgument];
  } else if ([tag isEqualToString:@"unauthenticated"]) {
    return [[DBCLOUDDOCSGenericErrorTag alloc] initWithUnauthenticated];
  } else if ([tag isEqualToString:@"permission_denied"]) {
    return [[DBCLOUDDOCSGenericErrorTag alloc] initWithPermissionDenied];
  } else if ([tag isEqualToString:@"doc_not_found"]) {
    return [[DBCLOUDDOCSGenericErrorTag alloc] initWithDocNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSGenericErrorTag alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSGenericErrorTag alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSGetContentArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSGetContentArg

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId {
  [DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:@(4) maxLength:nil pattern:@"id:.+"]](fileId);

  self = [super init];
  if (self) {
    _fileId = fileId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSGetContentArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSGetContentArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSGetContentArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetContentArg:other];
}

- (BOOL)isEqualToGetContentArg:(DBCLOUDDOCSGetContentArg *)aGetContentArg {
  if (self == aGetContentArg) {
    return YES;
  }
  if (![self.fileId isEqual:aGetContentArg.fileId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSGetContentArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSGetContentArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSGetContentArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"];

  return [[DBCLOUDDOCSGetContentArg alloc] initWithFileId:fileId];
}

@end

#import "DBCLOUDDOCSGetMetadataArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSGetMetadataArg

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId {

  self = [super init];
  if (self) {
    _fileId = fileId ?: @"";
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSGetMetadataArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSGetMetadataArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSGetMetadataArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetMetadataArg:other];
}

- (BOOL)isEqualToGetMetadataArg:(DBCLOUDDOCSGetMetadataArg *)aGetMetadataArg {
  if (self == aGetMetadataArg) {
    return YES;
  }
  if (![self.fileId isEqual:aGetMetadataArg.fileId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSGetMetadataArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSGetMetadataArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSGetMetadataArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"] ?: @"";

  return [[DBCLOUDDOCSGetMetadataArg alloc] initWithFileId:fileId];
}

@end

#import "DBCLOUDDOCSGetMetadataError.h"
#import "DBCLOUDDOCSGetMetadataErrorTagUnion.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSGetMetadataError

#pragma mark - Constructors

- (instancetype)initWithGetMetadataErrorTag:(DBCLOUDDOCSGetMetadataErrorTagUnion *)getMetadataErrorTag {

  self = [super init];
  if (self) {
    _getMetadataErrorTag = getMetadataErrorTag;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithGetMetadataErrorTag:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSGetMetadataErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSGetMetadataErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSGetMetadataErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.getMetadataErrorTag != nil) {
    result = prime * result + [self.getMetadataErrorTag hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetMetadataError:other];
}

- (BOOL)isEqualToGetMetadataError:(DBCLOUDDOCSGetMetadataError *)aGetMetadataError {
  if (self == aGetMetadataError) {
    return YES;
  }
  if (self.getMetadataErrorTag) {
    if (![self.getMetadataErrorTag isEqual:aGetMetadataError.getMetadataErrorTag]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSGetMetadataErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSGetMetadataError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.getMetadataErrorTag) {
    jsonDict[@"get_metadata_error_tag"] =
        [DBCLOUDDOCSGetMetadataErrorTagUnionSerializer serialize:valueObj.getMetadataErrorTag];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSGetMetadataError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBCLOUDDOCSGetMetadataErrorTagUnion *getMetadataErrorTag =
      valueDict[@"get_metadata_error_tag"]
          ? [DBCLOUDDOCSGetMetadataErrorTagUnionSerializer deserialize:valueDict[@"get_metadata_error_tag"]]
          : nil;

  return [[DBCLOUDDOCSGetMetadataError alloc] initWithGetMetadataErrorTag:getMetadataErrorTag];
}

@end

#import "DBCLOUDDOCSGetMetadataResult.h"
#import "DBCLOUDDOCSUserInfo.h"
#import "DBCLOUDDOCSUserPermissions.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSGetMetadataResult

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId
                         title:(NSString *)title
                      mimeType:(NSString *)mimeType
                       version:(NSString *)version
               providerVersion:(NSString *)providerVersion
                          user:(DBCLOUDDOCSUserInfo *)user
                     isDeleted:(NSNumber *)isDeleted
               userPermissions:(DBCLOUDDOCSUserPermissions *)userPermissions {

  self = [super init];
  if (self) {
    _fileId = fileId ?: @"";
    _title = title ?: @"";
    _mimeType = mimeType ?: @"";
    _version = version ?: @"";
    _providerVersion = providerVersion ?: @"";
    _user = user;
    _isDeleted = isDeleted ?: @NO;
    _userPermissions = userPermissions;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileId:nil
                        title:nil
                     mimeType:nil
                      version:nil
              providerVersion:nil
                         user:nil
                    isDeleted:nil
              userPermissions:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSGetMetadataResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSGetMetadataResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSGetMetadataResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];
  result = prime * result + [self.title hash];
  result = prime * result + [self.mimeType hash];
  result = prime * result + [self.version hash];
  result = prime * result + [self.providerVersion hash];
  if (self.user != nil) {
    result = prime * result + [self.user hash];
  }
  result = prime * result + [self.isDeleted hash];
  if (self.userPermissions != nil) {
    result = prime * result + [self.userPermissions hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetMetadataResult:other];
}

- (BOOL)isEqualToGetMetadataResult:(DBCLOUDDOCSGetMetadataResult *)aGetMetadataResult {
  if (self == aGetMetadataResult) {
    return YES;
  }
  if (![self.fileId isEqual:aGetMetadataResult.fileId]) {
    return NO;
  }
  if (![self.title isEqual:aGetMetadataResult.title]) {
    return NO;
  }
  if (![self.mimeType isEqual:aGetMetadataResult.mimeType]) {
    return NO;
  }
  if (![self.version isEqual:aGetMetadataResult.version]) {
    return NO;
  }
  if (![self.providerVersion isEqual:aGetMetadataResult.providerVersion]) {
    return NO;
  }
  if (self.user) {
    if (![self.user isEqual:aGetMetadataResult.user]) {
      return NO;
    }
  }
  if (![self.isDeleted isEqual:aGetMetadataResult.isDeleted]) {
    return NO;
  }
  if (self.userPermissions) {
    if (![self.userPermissions isEqual:aGetMetadataResult.userPermissions]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSGetMetadataResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSGetMetadataResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;
  jsonDict[@"title"] = valueObj.title;
  jsonDict[@"mime_type"] = valueObj.mimeType;
  jsonDict[@"version"] = valueObj.version;
  jsonDict[@"provider_version"] = valueObj.providerVersion;
  if (valueObj.user) {
    jsonDict[@"user"] = [DBCLOUDDOCSUserInfoSerializer serialize:valueObj.user];
  }
  jsonDict[@"is_deleted"] = valueObj.isDeleted;
  if (valueObj.userPermissions) {
    jsonDict[@"user_permissions"] = [DBCLOUDDOCSUserPermissionsSerializer serialize:valueObj.userPermissions];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSGetMetadataResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"] ?: @"";
  NSString *title = valueDict[@"title"] ?: @"";
  NSString *mimeType = valueDict[@"mime_type"] ?: @"";
  NSString *version = valueDict[@"version"] ?: @"";
  NSString *providerVersion = valueDict[@"provider_version"] ?: @"";
  DBCLOUDDOCSUserInfo *user = valueDict[@"user"] ? [DBCLOUDDOCSUserInfoSerializer deserialize:valueDict[@"user"]] : nil;
  NSNumber *isDeleted = valueDict[@"is_deleted"] ?: @NO;
  DBCLOUDDOCSUserPermissions *userPermissions =
      valueDict[@"user_permissions"] ? [DBCLOUDDOCSUserPermissionsSerializer deserialize:valueDict[@"user_permissions"]]
                                     : nil;

  return [[DBCLOUDDOCSGetMetadataResult alloc] initWithFileId:fileId
                                                        title:title
                                                     mimeType:mimeType
                                                      version:version
                                              providerVersion:providerVersion
                                                         user:user
                                                    isDeleted:isDeleted
                                              userPermissions:userPermissions];
}

@end

#import "DBCLOUDDOCSLockArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSLockArg

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId {

  self = [super init];
  if (self) {
    _fileId = fileId ?: @"";
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSLockArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSLockArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSLockArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLockArg:other];
}

- (BOOL)isEqualToLockArg:(DBCLOUDDOCSLockArg *)aLockArg {
  if (self == aLockArg) {
    return YES;
  }
  if (![self.fileId isEqual:aLockArg.fileId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSLockArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSLockArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSLockArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"] ?: @"";

  return [[DBCLOUDDOCSLockArg alloc] initWithFileId:fileId];
}

@end

#import "DBCLOUDDOCSLockResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSLockResult

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId expiresAt:(NSNumber *)expiresAt {

  self = [super init];
  if (self) {
    _fileId = fileId ?: @"";
    _expiresAt = expiresAt ?: @(0);
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileId:nil expiresAt:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSLockResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSLockResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSLockResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];
  result = prime * result + [self.expiresAt hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLockResult:other];
}

- (BOOL)isEqualToLockResult:(DBCLOUDDOCSLockResult *)aLockResult {
  if (self == aLockResult) {
    return YES;
  }
  if (![self.fileId isEqual:aLockResult.fileId]) {
    return NO;
  }
  if (![self.expiresAt isEqual:aLockResult.expiresAt]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSLockResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSLockResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;
  jsonDict[@"expires_at"] = valueObj.expiresAt;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSLockResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"] ?: @"";
  NSNumber *expiresAt = valueDict[@"expires_at"] ?: @(0);

  return [[DBCLOUDDOCSLockResult alloc] initWithFileId:fileId expiresAt:expiresAt];
}

@end

#import "DBCLOUDDOCSLockingError.h"
#import "DBCLOUDDOCSLockingErrorTagUnion.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSLockingError

#pragma mark - Constructors

- (instancetype)initWithLockingErrorTag:(DBCLOUDDOCSLockingErrorTagUnion *)lockingErrorTag {

  self = [super init];
  if (self) {
    _lockingErrorTag = lockingErrorTag;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLockingErrorTag:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSLockingErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSLockingErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSLockingErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.lockingErrorTag != nil) {
    result = prime * result + [self.lockingErrorTag hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLockingError:other];
}

- (BOOL)isEqualToLockingError:(DBCLOUDDOCSLockingError *)aLockingError {
  if (self == aLockingError) {
    return YES;
  }
  if (self.lockingErrorTag) {
    if (![self.lockingErrorTag isEqual:aLockingError.lockingErrorTag]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSLockingErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSLockingError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.lockingErrorTag) {
    jsonDict[@"locking_error_tag"] = [DBCLOUDDOCSLockingErrorTagUnionSerializer serialize:valueObj.lockingErrorTag];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSLockingError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBCLOUDDOCSLockingErrorTagUnion *lockingErrorTag =
      valueDict[@"locking_error_tag"]
          ? [DBCLOUDDOCSLockingErrorTagUnionSerializer deserialize:valueDict[@"locking_error_tag"]]
          : nil;

  return [[DBCLOUDDOCSLockingError alloc] initWithLockingErrorTag:lockingErrorTag];
}

@end

#import "DBCLOUDDOCSLockingErrorTag.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSLockingErrorTag

#pragma mark - Constructors

- (instancetype)initWithConflict {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSLockingErrorTagConflict;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSLockingErrorTagOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isConflict {
  return _tag == DBCLOUDDOCSLockingErrorTagConflict;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSLockingErrorTagOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSLockingErrorTagConflict:
    return @"DBCLOUDDOCSLockingErrorTagConflict";
  case DBCLOUDDOCSLockingErrorTagOther:
    return @"DBCLOUDDOCSLockingErrorTagOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSLockingErrorTagSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSLockingErrorTagSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSLockingErrorTagSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSLockingErrorTagConflict:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSLockingErrorTagOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLockingErrorTag:other];
}

- (BOOL)isEqualToLockingErrorTag:(DBCLOUDDOCSLockingErrorTag *)aLockingErrorTag {
  if (self == aLockingErrorTag) {
    return YES;
  }
  if (self.tag != aLockingErrorTag.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSLockingErrorTagConflict:
    return [[self tagName] isEqual:[aLockingErrorTag tagName]];
  case DBCLOUDDOCSLockingErrorTagOther:
    return [[self tagName] isEqual:[aLockingErrorTag tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSLockingErrorTagSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSLockingErrorTag *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isConflict]) {
    jsonDict[@".tag"] = @"conflict";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSLockingErrorTag *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"conflict"]) {
    return [[DBCLOUDDOCSLockingErrorTag alloc] initWithConflict];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSLockingErrorTag alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSLockingErrorTag alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSRenameArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSRenameArg

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId title:(NSString *)title {

  self = [super init];
  if (self) {
    _fileId = fileId ?: @"";
    _title = title ?: @"";
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileId:nil title:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSRenameArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSRenameArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSRenameArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];
  result = prime * result + [self.title hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRenameArg:other];
}

- (BOOL)isEqualToRenameArg:(DBCLOUDDOCSRenameArg *)aRenameArg {
  if (self == aRenameArg) {
    return YES;
  }
  if (![self.fileId isEqual:aRenameArg.fileId]) {
    return NO;
  }
  if (![self.title isEqual:aRenameArg.title]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSRenameArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSRenameArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;
  jsonDict[@"title"] = valueObj.title;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSRenameArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"] ?: @"";
  NSString *title = valueDict[@"title"] ?: @"";

  return [[DBCLOUDDOCSRenameArg alloc] initWithFileId:fileId title:title];
}

@end

#import "DBCLOUDDOCSRenameError.h"
#import "DBCLOUDDOCSRenameErrorTagUnion.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSRenameError

#pragma mark - Constructors

- (instancetype)initWithRenameErrorTag:(DBCLOUDDOCSRenameErrorTagUnion *)renameErrorTag {

  self = [super init];
  if (self) {
    _renameErrorTag = renameErrorTag;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithRenameErrorTag:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSRenameErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSRenameErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSRenameErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.renameErrorTag != nil) {
    result = prime * result + [self.renameErrorTag hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRenameError:other];
}

- (BOOL)isEqualToRenameError:(DBCLOUDDOCSRenameError *)aRenameError {
  if (self == aRenameError) {
    return YES;
  }
  if (self.renameErrorTag) {
    if (![self.renameErrorTag isEqual:aRenameError.renameErrorTag]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSRenameErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSRenameError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.renameErrorTag) {
    jsonDict[@"rename_error_tag"] = [DBCLOUDDOCSRenameErrorTagUnionSerializer serialize:valueObj.renameErrorTag];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSRenameError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBCLOUDDOCSRenameErrorTagUnion *renameErrorTag =
      valueDict[@"rename_error_tag"]
          ? [DBCLOUDDOCSRenameErrorTagUnionSerializer deserialize:valueDict[@"rename_error_tag"]]
          : nil;

  return [[DBCLOUDDOCSRenameError alloc] initWithRenameErrorTag:renameErrorTag];
}

@end

#import "DBCLOUDDOCSRenameErrorTag.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSRenameErrorTag

#pragma mark - Constructors

- (instancetype)initWithInvalidTitle {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSRenameErrorTagInvalidTitle;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSRenameErrorTagOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidTitle {
  return _tag == DBCLOUDDOCSRenameErrorTagInvalidTitle;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSRenameErrorTagOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSRenameErrorTagInvalidTitle:
    return @"DBCLOUDDOCSRenameErrorTagInvalidTitle";
  case DBCLOUDDOCSRenameErrorTagOther:
    return @"DBCLOUDDOCSRenameErrorTagOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSRenameErrorTagSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSRenameErrorTagSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSRenameErrorTagSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSRenameErrorTagInvalidTitle:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSRenameErrorTagOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRenameErrorTag:other];
}

- (BOOL)isEqualToRenameErrorTag:(DBCLOUDDOCSRenameErrorTag *)aRenameErrorTag {
  if (self == aRenameErrorTag) {
    return YES;
  }
  if (self.tag != aRenameErrorTag.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSRenameErrorTagInvalidTitle:
    return [[self tagName] isEqual:[aRenameErrorTag tagName]];
  case DBCLOUDDOCSRenameErrorTagOther:
    return [[self tagName] isEqual:[aRenameErrorTag tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSRenameErrorTagSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSRenameErrorTag *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidTitle]) {
    jsonDict[@".tag"] = @"invalid_title";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSRenameErrorTag *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_title"]) {
    return [[DBCLOUDDOCSRenameErrorTag alloc] initWithInvalidTitle];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSRenameErrorTag alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSRenameErrorTag alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSRenameResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSRenameResult

#pragma mark - Constructors

- (instancetype)initWithTitle:(NSString *)title {

  self = [super init];
  if (self) {
    _title = title ?: @"";
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithTitle:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSRenameResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSRenameResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSRenameResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.title hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRenameResult:other];
}

- (BOOL)isEqualToRenameResult:(DBCLOUDDOCSRenameResult *)aRenameResult {
  if (self == aRenameResult) {
    return YES;
  }
  if (![self.title isEqual:aRenameResult.title]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSRenameResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSRenameResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"title"] = valueObj.title;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSRenameResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *title = valueDict[@"title"] ?: @"";

  return [[DBCLOUDDOCSRenameResult alloc] initWithTitle:title];
}

@end

#import "DBCLOUDDOCSUnlockArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSUnlockArg

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId {

  self = [super init];
  if (self) {
    _fileId = fileId ?: @"";
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSUnlockArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSUnlockArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSUnlockArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUnlockArg:other];
}

- (BOOL)isEqualToUnlockArg:(DBCLOUDDOCSUnlockArg *)anUnlockArg {
  if (self == anUnlockArg) {
    return YES;
  }
  if (![self.fileId isEqual:anUnlockArg.fileId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSUnlockArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSUnlockArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSUnlockArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"] ?: @"";

  return [[DBCLOUDDOCSUnlockArg alloc] initWithFileId:fileId];
}

@end

#import "DBCLOUDDOCSUnlockResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSUnlockResult

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSUnlockResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSUnlockResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSUnlockResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUnlockResult:other];
}

- (BOOL)isEqualToUnlockResult:(DBCLOUDDOCSUnlockResult *)anUnlockResult {
  if (self == anUnlockResult) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSUnlockResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSUnlockResult *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSUnlockResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBCLOUDDOCSUnlockResult alloc] initDefault];
}

@end

#import "DBCLOUDDOCSContent.h"
#import "DBCLOUDDOCSUpdateContentArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSUpdateContentArg

#pragma mark - Constructors

- (instancetype)initWithFileId:(NSString *)fileId
                   actorTokens:(NSArray<NSString *> *)actorTokens
            additionalContents:(NSArray<DBCLOUDDOCSContent *> *)additionalContents {
  [DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:@(4) maxLength:nil pattern:@"id:.+"]](fileId);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](actorTokens);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](additionalContents);

  self = [super init];
  if (self) {
    _fileId = fileId;
    _actorTokens = actorTokens;
    _additionalContents = additionalContents;
  }
  return self;
}

- (instancetype)initWithFileId:(NSString *)fileId actorTokens:(NSArray<NSString *> *)actorTokens {
  return [self initWithFileId:fileId actorTokens:actorTokens additionalContents:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSUpdateContentArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSUpdateContentArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSUpdateContentArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.fileId hash];
  result = prime * result + [self.actorTokens hash];
  if (self.additionalContents != nil) {
    result = prime * result + [self.additionalContents hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUpdateContentArg:other];
}

- (BOOL)isEqualToUpdateContentArg:(DBCLOUDDOCSUpdateContentArg *)anUpdateContentArg {
  if (self == anUpdateContentArg) {
    return YES;
  }
  if (![self.fileId isEqual:anUpdateContentArg.fileId]) {
    return NO;
  }
  if (![self.actorTokens isEqual:anUpdateContentArg.actorTokens]) {
    return NO;
  }
  if (self.additionalContents) {
    if (![self.additionalContents isEqual:anUpdateContentArg.additionalContents]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSUpdateContentArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSUpdateContentArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file_id"] = valueObj.fileId;
  jsonDict[@"actor_tokens"] = [DBArraySerializer serialize:valueObj.actorTokens
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];
  if (valueObj.additionalContents) {
    jsonDict[@"additional_contents"] = [DBArraySerializer serialize:valueObj.additionalContents
                                                          withBlock:^id(id elem0) {
                                                            return [DBCLOUDDOCSContentSerializer serialize:elem0];
                                                          }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSUpdateContentArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileId = valueDict[@"file_id"];
  NSArray<NSString *> *actorTokens = [DBArraySerializer deserialize:valueDict[@"actor_tokens"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
  NSArray<DBCLOUDDOCSContent *> *additionalContents =
      valueDict[@"additional_contents"]
          ? [DBArraySerializer deserialize:valueDict[@"additional_contents"]
                                 withBlock:^id(id elem0) {
                                   return [DBCLOUDDOCSContentSerializer deserialize:elem0];
                                 }]
          : nil;

  return [[DBCLOUDDOCSUpdateContentArg alloc] initWithFileId:fileId
                                                 actorTokens:actorTokens
                                          additionalContents:additionalContents];
}

@end

#import "DBCLOUDDOCSCloudDocsAccessError.h"
#import "DBCLOUDDOCSUpdateContentError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSUpdateContentError

#pragma mark - Constructors

- (instancetype)initWithInvalidDocId {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSUpdateContentErrorInvalidDocId;
  }
  return self;
}

- (instancetype)initWithNotFound {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSUpdateContentErrorNotFound;
  }
  return self;
}

- (instancetype)initWithPermissionDenied {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSUpdateContentErrorPermissionDenied;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSUpdateContentErrorOther;
  }
  return self;
}

- (instancetype)initWithUploadSizeTooLarge {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSUpdateContentErrorUploadSizeTooLarge;
  }
  return self;
}

- (instancetype)initWithConflict {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSUpdateContentErrorConflict;
  }
  return self;
}

- (instancetype)initWithUnlocked {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSUpdateContentErrorUnlocked;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidDocId {
  return _tag == DBCLOUDDOCSUpdateContentErrorInvalidDocId;
}

- (BOOL)isNotFound {
  return _tag == DBCLOUDDOCSUpdateContentErrorNotFound;
}

- (BOOL)isPermissionDenied {
  return _tag == DBCLOUDDOCSUpdateContentErrorPermissionDenied;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSUpdateContentErrorOther;
}

- (BOOL)isUploadSizeTooLarge {
  return _tag == DBCLOUDDOCSUpdateContentErrorUploadSizeTooLarge;
}

- (BOOL)isConflict {
  return _tag == DBCLOUDDOCSUpdateContentErrorConflict;
}

- (BOOL)isUnlocked {
  return _tag == DBCLOUDDOCSUpdateContentErrorUnlocked;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSUpdateContentErrorInvalidDocId:
    return @"DBCLOUDDOCSUpdateContentErrorInvalidDocId";
  case DBCLOUDDOCSUpdateContentErrorNotFound:
    return @"DBCLOUDDOCSUpdateContentErrorNotFound";
  case DBCLOUDDOCSUpdateContentErrorPermissionDenied:
    return @"DBCLOUDDOCSUpdateContentErrorPermissionDenied";
  case DBCLOUDDOCSUpdateContentErrorOther:
    return @"DBCLOUDDOCSUpdateContentErrorOther";
  case DBCLOUDDOCSUpdateContentErrorUploadSizeTooLarge:
    return @"DBCLOUDDOCSUpdateContentErrorUploadSizeTooLarge";
  case DBCLOUDDOCSUpdateContentErrorConflict:
    return @"DBCLOUDDOCSUpdateContentErrorConflict";
  case DBCLOUDDOCSUpdateContentErrorUnlocked:
    return @"DBCLOUDDOCSUpdateContentErrorUnlocked";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSUpdateContentErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSUpdateContentErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSUpdateContentErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSUpdateContentErrorInvalidDocId:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSUpdateContentErrorNotFound:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSUpdateContentErrorPermissionDenied:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSUpdateContentErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSUpdateContentErrorUploadSizeTooLarge:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSUpdateContentErrorConflict:
    result = prime * result + [[self tagName] hash];
  case DBCLOUDDOCSUpdateContentErrorUnlocked:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUpdateContentError:other];
}

- (BOOL)isEqualToUpdateContentError:(DBCLOUDDOCSUpdateContentError *)anUpdateContentError {
  if (self == anUpdateContentError) {
    return YES;
  }
  if (self.tag != anUpdateContentError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSUpdateContentErrorInvalidDocId:
    return [[self tagName] isEqual:[anUpdateContentError tagName]];
  case DBCLOUDDOCSUpdateContentErrorNotFound:
    return [[self tagName] isEqual:[anUpdateContentError tagName]];
  case DBCLOUDDOCSUpdateContentErrorPermissionDenied:
    return [[self tagName] isEqual:[anUpdateContentError tagName]];
  case DBCLOUDDOCSUpdateContentErrorOther:
    return [[self tagName] isEqual:[anUpdateContentError tagName]];
  case DBCLOUDDOCSUpdateContentErrorUploadSizeTooLarge:
    return [[self tagName] isEqual:[anUpdateContentError tagName]];
  case DBCLOUDDOCSUpdateContentErrorConflict:
    return [[self tagName] isEqual:[anUpdateContentError tagName]];
  case DBCLOUDDOCSUpdateContentErrorUnlocked:
    return [[self tagName] isEqual:[anUpdateContentError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSUpdateContentErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSUpdateContentError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidDocId]) {
    jsonDict[@".tag"] = @"invalid_doc_id";
  } else if ([valueObj isNotFound]) {
    jsonDict[@".tag"] = @"not_found";
  } else if ([valueObj isPermissionDenied]) {
    jsonDict[@".tag"] = @"permission_denied";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isUploadSizeTooLarge]) {
    jsonDict[@".tag"] = @"upload_size_too_large";
  } else if ([valueObj isConflict]) {
    jsonDict[@".tag"] = @"conflict";
  } else if ([valueObj isUnlocked]) {
    jsonDict[@".tag"] = @"unlocked";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSUpdateContentError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_doc_id"]) {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithInvalidDocId];
  } else if ([tag isEqualToString:@"not_found"]) {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithNotFound];
  } else if ([tag isEqualToString:@"permission_denied"]) {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithPermissionDenied];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithOther];
  } else if ([tag isEqualToString:@"upload_size_too_large"]) {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithUploadSizeTooLarge];
  } else if ([tag isEqualToString:@"conflict"]) {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithConflict];
  } else if ([tag isEqualToString:@"unlocked"]) {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithUnlocked];
  } else {
    return [[DBCLOUDDOCSUpdateContentError alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSUpdateContentResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSUpdateContentResult

#pragma mark - Constructors

- (instancetype)initWithVersion:(NSString *)version {
  [DBStoneValidators nonnullValidator:nil](version);

  self = [super init];
  if (self) {
    _version = version;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSUpdateContentResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSUpdateContentResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSUpdateContentResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.version hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUpdateContentResult:other];
}

- (BOOL)isEqualToUpdateContentResult:(DBCLOUDDOCSUpdateContentResult *)anUpdateContentResult {
  if (self == anUpdateContentResult) {
    return YES;
  }
  if (![self.version isEqual:anUpdateContentResult.version]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSUpdateContentResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSUpdateContentResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"version"] = valueObj.version;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSUpdateContentResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *version = valueDict[@"version"];

  return [[DBCLOUDDOCSUpdateContentResult alloc] initWithVersion:version];
}

@end

#import "DBCLOUDDOCSUserInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSUserInfo

#pragma mark - Constructors

- (instancetype)initWithId_:(NSString *)id_ email:(NSString *)email {

  self = [super init];
  if (self) {
    _id_ = id_ ?: @"";
    _email = email ?: @"";
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithId_:nil email:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSUserInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSUserInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSUserInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.id_ hash];
  result = prime * result + [self.email hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserInfo:other];
}

- (BOOL)isEqualToUserInfo:(DBCLOUDDOCSUserInfo *)anUserInfo {
  if (self == anUserInfo) {
    return YES;
  }
  if (![self.id_ isEqual:anUserInfo.id_]) {
    return NO;
  }
  if (![self.email isEqual:anUserInfo.email]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSUserInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSUserInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"id"] = valueObj.id_;
  jsonDict[@"email"] = valueObj.email;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSUserInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *id_ = valueDict[@"id"] ?: @"";
  NSString *email = valueDict[@"email"] ?: @"";

  return [[DBCLOUDDOCSUserInfo alloc] initWithId_:id_ email:email];
}

@end

#import "DBCLOUDDOCSUserPermissions.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSUserPermissions

#pragma mark - Constructors

- (instancetype)initWithCanEdit:(NSNumber *)canEdit
                      canRename:(NSNumber *)canRename
                     canComment:(NSNumber *)canComment
                    canDownload:(NSNumber *)canDownload {

  self = [super init];
  if (self) {
    _canEdit = canEdit ?: @NO;
    _canRename = canRename ?: @NO;
    _canComment = canComment ?: @NO;
    _canDownload = canDownload ?: @NO;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCanEdit:nil canRename:nil canComment:nil canDownload:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSUserPermissionsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSUserPermissionsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSUserPermissionsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.canEdit hash];
  result = prime * result + [self.canRename hash];
  result = prime * result + [self.canComment hash];
  result = prime * result + [self.canDownload hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserPermissions:other];
}

- (BOOL)isEqualToUserPermissions:(DBCLOUDDOCSUserPermissions *)anUserPermissions {
  if (self == anUserPermissions) {
    return YES;
  }
  if (![self.canEdit isEqual:anUserPermissions.canEdit]) {
    return NO;
  }
  if (![self.canRename isEqual:anUserPermissions.canRename]) {
    return NO;
  }
  if (![self.canComment isEqual:anUserPermissions.canComment]) {
    return NO;
  }
  if (![self.canDownload isEqual:anUserPermissions.canDownload]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSUserPermissionsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSUserPermissions *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"can_edit"] = valueObj.canEdit;
  jsonDict[@"can_rename"] = valueObj.canRename;
  jsonDict[@"can_comment"] = valueObj.canComment;
  jsonDict[@"can_download"] = valueObj.canDownload;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSUserPermissions *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *canEdit = valueDict[@"can_edit"] ?: @NO;
  NSNumber *canRename = valueDict[@"can_rename"] ?: @NO;
  NSNumber *canComment = valueDict[@"can_comment"] ?: @NO;
  NSNumber *canDownload = valueDict[@"can_download"] ?: @NO;

  return [[DBCLOUDDOCSUserPermissions alloc] initWithCanEdit:canEdit
                                                   canRename:canRename
                                                  canComment:canComment
                                                 canDownload:canDownload];
}

@end

#import "DBCLOUDDOCSGenericErrorTag.h"
#import "DBCLOUDDOCSGetMetadataErrorTagUnion.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSGetMetadataErrorTagUnion

@synthesize genericError = _genericError;

#pragma mark - Constructors

- (instancetype)initWithGenericError:(DBCLOUDDOCSGenericErrorTag *)genericError {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSGetMetadataErrorTagUnionGenericError;
    _genericError = genericError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSGetMetadataErrorTagUnionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBCLOUDDOCSGenericErrorTag *)genericError {
  if (![self isGenericError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBCLOUDDOCSGetMetadataErrorTagUnionGenericError, but was %@.", [self tagName]];
  }
  return _genericError;
}

#pragma mark - Tag state methods

- (BOOL)isGenericError {
  return _tag == DBCLOUDDOCSGetMetadataErrorTagUnionGenericError;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSGetMetadataErrorTagUnionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSGetMetadataErrorTagUnionGenericError:
    return @"DBCLOUDDOCSGetMetadataErrorTagUnionGenericError";
  case DBCLOUDDOCSGetMetadataErrorTagUnionOther:
    return @"DBCLOUDDOCSGetMetadataErrorTagUnionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSGetMetadataErrorTagUnionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSGetMetadataErrorTagUnionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSGetMetadataErrorTagUnionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSGetMetadataErrorTagUnionGenericError:
    result = prime * result + [self.genericError hash];
  case DBCLOUDDOCSGetMetadataErrorTagUnionOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetMetadataErrorTagUnion:other];
}

- (BOOL)isEqualToGetMetadataErrorTagUnion:(DBCLOUDDOCSGetMetadataErrorTagUnion *)aGetMetadataErrorTagUnion {
  if (self == aGetMetadataErrorTagUnion) {
    return YES;
  }
  if (self.tag != aGetMetadataErrorTagUnion.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSGetMetadataErrorTagUnionGenericError:
    return [self.genericError isEqual:aGetMetadataErrorTagUnion.genericError];
  case DBCLOUDDOCSGetMetadataErrorTagUnionOther:
    return [[self tagName] isEqual:[aGetMetadataErrorTagUnion tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSGetMetadataErrorTagUnionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSGetMetadataErrorTagUnion *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGenericError]) {
    jsonDict[@"generic_error"] = [[DBCLOUDDOCSGenericErrorTagSerializer serialize:valueObj.genericError] mutableCopy];
    jsonDict[@".tag"] = @"generic_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSGetMetadataErrorTagUnion *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"generic_error"]) {
    DBCLOUDDOCSGenericErrorTag *genericError =
        [DBCLOUDDOCSGenericErrorTagSerializer deserialize:valueDict[@"generic_error"]];
    return [[DBCLOUDDOCSGetMetadataErrorTagUnion alloc] initWithGenericError:genericError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSGetMetadataErrorTagUnion alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSGetMetadataErrorTagUnion alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSGenericErrorTag.h"
#import "DBCLOUDDOCSLockingErrorTag.h"
#import "DBCLOUDDOCSLockingErrorTagUnion.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSLockingErrorTagUnion

@synthesize lockingError = _lockingError;
@synthesize genericError = _genericError;

#pragma mark - Constructors

- (instancetype)initWithLockingError:(DBCLOUDDOCSLockingErrorTag *)lockingError {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSLockingErrorTagUnionLockingError;
    _lockingError = lockingError;
  }
  return self;
}

- (instancetype)initWithGenericError:(DBCLOUDDOCSGenericErrorTag *)genericError {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSLockingErrorTagUnionGenericError;
    _genericError = genericError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSLockingErrorTagUnionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBCLOUDDOCSLockingErrorTag *)lockingError {
  if (![self isLockingError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBCLOUDDOCSLockingErrorTagUnionLockingError, but was %@.", [self tagName]];
  }
  return _lockingError;
}

- (DBCLOUDDOCSGenericErrorTag *)genericError {
  if (![self isGenericError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBCLOUDDOCSLockingErrorTagUnionGenericError, but was %@.", [self tagName]];
  }
  return _genericError;
}

#pragma mark - Tag state methods

- (BOOL)isLockingError {
  return _tag == DBCLOUDDOCSLockingErrorTagUnionLockingError;
}

- (BOOL)isGenericError {
  return _tag == DBCLOUDDOCSLockingErrorTagUnionGenericError;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSLockingErrorTagUnionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSLockingErrorTagUnionLockingError:
    return @"DBCLOUDDOCSLockingErrorTagUnionLockingError";
  case DBCLOUDDOCSLockingErrorTagUnionGenericError:
    return @"DBCLOUDDOCSLockingErrorTagUnionGenericError";
  case DBCLOUDDOCSLockingErrorTagUnionOther:
    return @"DBCLOUDDOCSLockingErrorTagUnionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSLockingErrorTagUnionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSLockingErrorTagUnionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSLockingErrorTagUnionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSLockingErrorTagUnionLockingError:
    result = prime * result + [self.lockingError hash];
  case DBCLOUDDOCSLockingErrorTagUnionGenericError:
    result = prime * result + [self.genericError hash];
  case DBCLOUDDOCSLockingErrorTagUnionOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLockingErrorTagUnion:other];
}

- (BOOL)isEqualToLockingErrorTagUnion:(DBCLOUDDOCSLockingErrorTagUnion *)aLockingErrorTagUnion {
  if (self == aLockingErrorTagUnion) {
    return YES;
  }
  if (self.tag != aLockingErrorTagUnion.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSLockingErrorTagUnionLockingError:
    return [self.lockingError isEqual:aLockingErrorTagUnion.lockingError];
  case DBCLOUDDOCSLockingErrorTagUnionGenericError:
    return [self.genericError isEqual:aLockingErrorTagUnion.genericError];
  case DBCLOUDDOCSLockingErrorTagUnionOther:
    return [[self tagName] isEqual:[aLockingErrorTagUnion tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSLockingErrorTagUnionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSLockingErrorTagUnion *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isLockingError]) {
    jsonDict[@"locking_error"] = [[DBCLOUDDOCSLockingErrorTagSerializer serialize:valueObj.lockingError] mutableCopy];
    jsonDict[@".tag"] = @"locking_error";
  } else if ([valueObj isGenericError]) {
    jsonDict[@"generic_error"] = [[DBCLOUDDOCSGenericErrorTagSerializer serialize:valueObj.genericError] mutableCopy];
    jsonDict[@".tag"] = @"generic_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSLockingErrorTagUnion *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"locking_error"]) {
    DBCLOUDDOCSLockingErrorTag *lockingError =
        [DBCLOUDDOCSLockingErrorTagSerializer deserialize:valueDict[@"locking_error"]];
    return [[DBCLOUDDOCSLockingErrorTagUnion alloc] initWithLockingError:lockingError];
  } else if ([tag isEqualToString:@"generic_error"]) {
    DBCLOUDDOCSGenericErrorTag *genericError =
        [DBCLOUDDOCSGenericErrorTagSerializer deserialize:valueDict[@"generic_error"]];
    return [[DBCLOUDDOCSLockingErrorTagUnion alloc] initWithGenericError:genericError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSLockingErrorTagUnion alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSLockingErrorTagUnion alloc] initWithOther];
  }
}

@end

#import "DBCLOUDDOCSGenericErrorTag.h"
#import "DBCLOUDDOCSLockingErrorTag.h"
#import "DBCLOUDDOCSRenameErrorTag.h"
#import "DBCLOUDDOCSRenameErrorTagUnion.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCLOUDDOCSRenameErrorTagUnion

@synthesize renameError = _renameError;
@synthesize genericError = _genericError;
@synthesize lockingError = _lockingError;

#pragma mark - Constructors

- (instancetype)initWithRenameError:(DBCLOUDDOCSRenameErrorTag *)renameError {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSRenameErrorTagUnionRenameError;
    _renameError = renameError;
  }
  return self;
}

- (instancetype)initWithGenericError:(DBCLOUDDOCSGenericErrorTag *)genericError {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSRenameErrorTagUnionGenericError;
    _genericError = genericError;
  }
  return self;
}

- (instancetype)initWithLockingError:(DBCLOUDDOCSLockingErrorTag *)lockingError {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSRenameErrorTagUnionLockingError;
    _lockingError = lockingError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCLOUDDOCSRenameErrorTagUnionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBCLOUDDOCSRenameErrorTag *)renameError {
  if (![self isRenameError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBCLOUDDOCSRenameErrorTagUnionRenameError, but was %@.", [self tagName]];
  }
  return _renameError;
}

- (DBCLOUDDOCSGenericErrorTag *)genericError {
  if (![self isGenericError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBCLOUDDOCSRenameErrorTagUnionGenericError, but was %@.", [self tagName]];
  }
  return _genericError;
}

- (DBCLOUDDOCSLockingErrorTag *)lockingError {
  if (![self isLockingError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBCLOUDDOCSRenameErrorTagUnionLockingError, but was %@.", [self tagName]];
  }
  return _lockingError;
}

#pragma mark - Tag state methods

- (BOOL)isRenameError {
  return _tag == DBCLOUDDOCSRenameErrorTagUnionRenameError;
}

- (BOOL)isGenericError {
  return _tag == DBCLOUDDOCSRenameErrorTagUnionGenericError;
}

- (BOOL)isLockingError {
  return _tag == DBCLOUDDOCSRenameErrorTagUnionLockingError;
}

- (BOOL)isOther {
  return _tag == DBCLOUDDOCSRenameErrorTagUnionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCLOUDDOCSRenameErrorTagUnionRenameError:
    return @"DBCLOUDDOCSRenameErrorTagUnionRenameError";
  case DBCLOUDDOCSRenameErrorTagUnionGenericError:
    return @"DBCLOUDDOCSRenameErrorTagUnionGenericError";
  case DBCLOUDDOCSRenameErrorTagUnionLockingError:
    return @"DBCLOUDDOCSRenameErrorTagUnionLockingError";
  case DBCLOUDDOCSRenameErrorTagUnionOther:
    return @"DBCLOUDDOCSRenameErrorTagUnionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBCLOUDDOCSRenameErrorTagUnionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBCLOUDDOCSRenameErrorTagUnionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCLOUDDOCSRenameErrorTagUnionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCLOUDDOCSRenameErrorTagUnionRenameError:
    result = prime * result + [self.renameError hash];
  case DBCLOUDDOCSRenameErrorTagUnionGenericError:
    result = prime * result + [self.genericError hash];
  case DBCLOUDDOCSRenameErrorTagUnionLockingError:
    result = prime * result + [self.lockingError hash];
  case DBCLOUDDOCSRenameErrorTagUnionOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRenameErrorTagUnion:other];
}

- (BOOL)isEqualToRenameErrorTagUnion:(DBCLOUDDOCSRenameErrorTagUnion *)aRenameErrorTagUnion {
  if (self == aRenameErrorTagUnion) {
    return YES;
  }
  if (self.tag != aRenameErrorTagUnion.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCLOUDDOCSRenameErrorTagUnionRenameError:
    return [self.renameError isEqual:aRenameErrorTagUnion.renameError];
  case DBCLOUDDOCSRenameErrorTagUnionGenericError:
    return [self.genericError isEqual:aRenameErrorTagUnion.genericError];
  case DBCLOUDDOCSRenameErrorTagUnionLockingError:
    return [self.lockingError isEqual:aRenameErrorTagUnion.lockingError];
  case DBCLOUDDOCSRenameErrorTagUnionOther:
    return [[self tagName] isEqual:[aRenameErrorTagUnion tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCLOUDDOCSRenameErrorTagUnionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBCLOUDDOCSRenameErrorTagUnion *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isRenameError]) {
    jsonDict[@"rename_error"] = [[DBCLOUDDOCSRenameErrorTagSerializer serialize:valueObj.renameError] mutableCopy];
    jsonDict[@".tag"] = @"rename_error";
  } else if ([valueObj isGenericError]) {
    jsonDict[@"generic_error"] = [[DBCLOUDDOCSGenericErrorTagSerializer serialize:valueObj.genericError] mutableCopy];
    jsonDict[@".tag"] = @"generic_error";
  } else if ([valueObj isLockingError]) {
    jsonDict[@"locking_error"] = [[DBCLOUDDOCSLockingErrorTagSerializer serialize:valueObj.lockingError] mutableCopy];
    jsonDict[@".tag"] = @"locking_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBCLOUDDOCSRenameErrorTagUnion *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"rename_error"]) {
    DBCLOUDDOCSRenameErrorTag *renameError =
        [DBCLOUDDOCSRenameErrorTagSerializer deserialize:valueDict[@"rename_error"]];
    return [[DBCLOUDDOCSRenameErrorTagUnion alloc] initWithRenameError:renameError];
  } else if ([tag isEqualToString:@"generic_error"]) {
    DBCLOUDDOCSGenericErrorTag *genericError =
        [DBCLOUDDOCSGenericErrorTagSerializer deserialize:valueDict[@"generic_error"]];
    return [[DBCLOUDDOCSRenameErrorTagUnion alloc] initWithGenericError:genericError];
  } else if ([tag isEqualToString:@"locking_error"]) {
    DBCLOUDDOCSLockingErrorTag *lockingError =
        [DBCLOUDDOCSLockingErrorTagSerializer deserialize:valueDict[@"locking_error"]];
    return [[DBCLOUDDOCSRenameErrorTagUnion alloc] initWithLockingError:lockingError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCLOUDDOCSRenameErrorTagUnion alloc] initWithOther];
  } else {
    return [[DBCLOUDDOCSRenameErrorTagUnion alloc] initWithOther];
  }
}

@end
